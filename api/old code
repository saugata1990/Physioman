physios.post('/new-account-old', (req, res) => {
    phoneExists(req.body.physio_phone)
    .then((exists) => {
        if(exists){
            res.status(400).json({message: 'phone number already taken'})
        }
        else{
            emailExists(req.body.physio_email)
            .then((exists) => {
                if(exists){
                    res.status(400).json({message: 'email id already taken'})
                }
                else{
                    Physio.findOne({physio_id: req.body.physio_id}).exec()
                    .then((physio) => {
                        if(physio){
                            res.status(400).json({message: 'physio already exists'})
                        }
                        else{
                            bcrypt.hash(req.body.password, 10)
                            .then((hash) => {
                                const physio = new Physio({
                                    physio_id: req.body.physio_id,
                                    password_hash: hash,
                                    physio_name: req.body.physio_name,
                                    physio_email: req.body.physio_email,
                                    physio_phone: req.body.physio_phone,
                                    physio_gender: req.body.physio_gender,
                                    physio_dob: date.parse(req.body.physio_dob.toString(), 'DD-MM-YYYY'),
                                    date_joined: date.parse(req.body.date_joined.toString(), 'DD-MM-YYYY'),
                                    isConsultant: req.body.isConsultant
                                    
                                })
                                if(physio.isConsultant){
                                    new Consultant({
                                        consultant_id: physio.physio_id, 
                                        consultant_name: physio.physio_name,
                                        consultant_email: physio.physio_email,
                                        consultant_phone: physio.physio_phone,
                                        password_hash: physio.password_hash,
                                        consultant_gender: physio.physio_gender,
                                        date_joined: date.parse(physio.date_joined.toString(), 'DD-MM-YYYY')
                                    }).save((err) => console.log('Consultant listing updated'))
                                }
                                new PhoneAndEmail({
                                    registered_phone_number: physio.physio_phone,
                                    registered_email: physio.physio_email
                                }).save(err => console.log('phone and email added to repository'))
                                physio.save((err) => {
                                    if(err){
                                        res.status(500).json({message:err})
                                    }
                                    res.status(200).json({message: 'Physio created in database'})
                                })
                            })
                        }
                    })
                }
            })
        }
    })
})


physios.post('/login-old', (req, res) => {
    Physio.findOne({physio_id: req.body.physio_id}).exec()
    .then((physio) => {
        if(!physio){
            res.status(404).json({message: 'physio does not exist'})
        }
        else{
            bcrypt.compare(req.body.password, physio.password_hash)
            .then((isValid) => {
                if(isValid){
                    res.status(200).json({message: 'Successfully logged in'}) // JWT to be returned
                }
                else{
                    res.status(404).json({message: 'Invalid password'})
                }
            })
        }
    })
})


consultants.post('/new-consultant-old', (req, res) => {
    phoneExists(req.body.consultant_phone)
    .then((exists) => {
        if(exists){
            res.status(400).json({message: 'phone number already taken'})
        }
        else{
            emailExists(req.body.consultant_email)
            .then((exists) => {
                if(exists){
                    res.status(400).json({message: 'email id already taken'})
                }
                else{
                    Consultant.findOne({consultant_id: req.body.consultant_id}).exec()
                    .then((consultant) => {
                        if(consultant){
                            res.status(400).json({message: 'Consultant already exists'})
                        }
                        else{
                            bcrypt.hash(req.body.password, 10, (err, hash) => {
                                new Consultant({
                                    consultant_id: req.body.consultant_id,
                                    consultant_name: req.body.consultant_name,
                                    consultant_email: req.body.consultant_email,
                                    consultant_phone: req.body.consultant_phone,
                                    password_hash: hash,
                                    consultant_gender: req.body.consultant_gender,
                                    date_joined: date.parse(req.body.date_joined, 'DD-MM-YYYY'),
                                    number_of_consultations: 0,
                                    pending_consultations: 0
                                }).save(err =>{console.log('Consultant added')})
                                new PhoneAndEmail({
                                    registered_phone_number: req.body.consultant_phone,
                                    registered_email: req.body.consultant_email
                                }).save(err => console.log('phone and email added to repository'))
                                res.status(200).json({message: 'Consultant created'})
                            })
                        }
                    })
                    .catch(err => res.status(500).json({error: err}))
                }
            })
        }
    })
})

consultants.put('/process-request-old', (req, res) => {
    Request.findOne({requested_by: req.body.patient_id}).exec()
    .then((request) => {
        request.sessions_fixed_by_consultant = req.body.sessions_fixed
        request.ready_for_booking = true
        request.save(err => console.log('Request ready for booking'))
        Consultant.findOne({consultant_id: req.body.consultant_id}).exec()
        .then((consultant) => {
            consultant.number_of_consultations ++
            consultant.pending_consultations --
            consultant.last_consultation_date = new Date()
            consultant.save(err => console.log('Consultant details updated'))
        })
        res.status(200).json({'message': 'Ready for booking'})
    })
})


// to be accessed by patient
services.post('/new-booking-request-old', (req, res) => {
    const request = new Request({
        requested_by: req.body.requested_by,
        ailment_description: req.body.ailment_description,
        physio_gender_preference: req.body.physio_gender_preference,
        consultation_payment_mode: req.body.consultation_payment_mode,
        request_timestamp: new Date(),
        ready_for_booking: false
    })
    Request.findOne({requested_by: request.requested_by}, (err, exists) => {
        if(err){
            res.status(500).json({error:err})
        }
        if(exists){
            res.status(400).json({message: 'Request already logged'})
        }
        else{
            request.save(err => console.log('new request saved to database'))
            res.status(200).json({message: 'New Request logged'})
        }
    })   
})

admin.post('/assign-consultant-old', (req, res) => {
    Request.findOne({requested_by: req.body.requested_by}).exec()
    .then((err, request) => {
        if(err){
            res.status(500).json({error: err})
        }
        Consultant.findOne({consultant_id: req.body.consultant_id}).exec()
        .then((err, consultant) => {
            if(err){
                res.status(500).json({error: err})
            }
            consultant.pending_consultations.push(request.request_id)
            consultant.pending_consultations_count ++
            request.mapped_consultant = consultant.consultant_id
            request.save(err => console.log('consultant mapped to request'))
            consultant.save(err=>console.log('request db updated'))

            let his_her = 'his'
            if(consultant.consultant_gender == 'female'){
                his_her = 'her'
            }
            sendSMSmock(request.requested_by,
                `Your consultant is ${consultant.consultant_name} 
                and ${his_her} contact no is ${consultant.consultant_phone}`
            )
            Patient.findOne({patient_phone: request.requested_by}).exec()
            .then((err, patient) => {
                sendSMSmock(consultant.consultant_phone,
                    `Patient name: ${patient.patient_name}, 
                    Contact no: ${patient.patient_phone},
                    Address: ${patient.patient_address}`
                )
                res.status(200).json({message: 'Success'})
            }) 
         
        })
    })
})


// needs refactoring
patients.post('/signup-old', (req, res) => {
    phoneExists(req.body.patient_phone)
    .then((exists) => {
        if(exists){
            res.status(400).json({message: 'phone number already taken'})
        }
        else{
            emailExists(req.body.patient_email)
            .then((exists) => {
                if(exists){
                    res.status(400).json({message: 'email id already taken'})
                }
                else{
                    Patient.findOne({patient_phone: req.body.patient_phone}).exec()
                    .then((patient) => {
                        if(patient){
                            res.status(400).json({message: 'patient already exists'})
                        }
                        else{
                            bcrypt.hash(req.body.password, 10, (err, hash) => {
                                if(err){
                                    res.status(500).json({error:err})
                                }
                                const patient = new Patient({
                                    patient_id: req.body.patient_phone,
                                    patient_phone: req.body.patient_phone,
                                    password_hash: hash,
                                    patient_name: req.body.patient_name,
                                    patient_email: req.body.patient_email,
                                    patient_gender: req.body.patient_gender,
                                    patient_dob: date.parse(req.body.patient_dob, 'DD-MM-YYYY'),
                                    date_joined: new Date(),
                                    patient_address: req.body.patient_address,
                                    ailment_history: req.body.ailment_history,
                                    total_number_of_sessions: 0
                                })
                                patient.save((err) => {
                                    if(err){
                                        res.status(500).json({message:err})
                                    }
                                    res.status(200).json({message: 'Patient created in database'})
                                })
                            })
                        }
                    })
                }    
            })
        }
    })
})


admin.post('/add-or-update-booking-old', (req, res) => {
    Booking.findOne({servicing_request: req.body.request_id}).exec()
    .then((err, booking) => {
        if(err){
            res.status(500).json({error: err})
        }
        Request.findOne({request_id: req.body.request_id}).exec()
        .then((err, request) => {
            if(err){
                res.status(500).json({error: err})
            }
            request.ready_for_booking = false
            request.save(err => console.log('Request has been serviced'))
        })
        if(booking){
            booking.allotted_sessions = req.body.allotted_sessions
            booking.assigned_physio = req.body.assigned_physio
            booking.booking_updated_at = new Date()
            booking.payment_mode = req.body.payment_mode
            booking.save(err => console.log('Booking details updated'))
            res.status(200).json({message: 'Booking details updated'})
        }
        else{
            new Booking({
                servicing_request: req.body.request_id,
                booked_for: req.body.booked_for,
                assigned_physio: req.body.assigned_physio,
                allotted_sessions: req.body.allotted_sessions,
                booked_at: new Date(),
                payment_mode: req.body.payment_mode
            }).save(err => console.log('New booking registered'))
            res.status(200).json({message: 'Booking registered'})
        }
    })
})

patients.post('/login', (req, res) => {
    Patient.findOne({patient_id: req.body.patient_id}).exec()
    .then((err, patient) => {
        if(err){
            res.status(500).json({message: err})
        }
        if(!patient){
            res.status(403).json({message: 'patient does not exist'})
        }
        else{
            bcrypt.compare(req.body.password, patient.password_hash, (err, isValid) => {
                if(isValid){
                    jwt.sign({patient}, 'jwtpatientsecretkey', (err, token) => {
                        res.status(200).json({token})
                    })
                }
                else{
                    res.status(403).json({message: 'Invalid password'})
                }
            })
        }
    })
})
